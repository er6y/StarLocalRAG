apply plugin: 'com.android.library'

// Vulkan着色器预构建任务
task buildVulkanShaders {
    description 'Build Vulkan shaders using host toolchain'
    
    def llamaCppRoot = file('../llama.cpp-master')
    def vulkanShadersDir = file("${llamaCppRoot}/ggml/src/ggml-vulkan/vulkan-shaders")
    def vulkanShadersGenSrc = file("${vulkanShadersDir}/vulkan-shaders-gen.cpp")
    def buildDir = file('build/vulkan-shaders')
    def vulkanShadersGenExe = file("${buildDir}/vulkan-shaders-gen.exe")
    def outputDir = file('src/main/cpp/generated')
    def headerFile = file("${outputDir}/ggml-vulkan-shaders.hpp")
    def sourceFile = file("${outputDir}/ggml-vulkan-shaders.cpp")
    
    inputs.file vulkanShadersGenSrc
    inputs.dir vulkanShadersDir
    outputs.file headerFile
    outputs.file sourceFile
    
    doLast {
        // 创建构建目录
        buildDir.mkdirs()
        outputDir.mkdirs()

        // 解析 glslc 可执行文件路径
        def vulkanSdk = System.getenv('VULKAN_SDK')
        def glslcPath = vulkanSdk ? new File(vulkanSdk, 'Bin/glslc.exe').absolutePath : 'glslc.exe'
        if (vulkanSdk) {
            println "Using VULKAN_SDK at: ${vulkanSdk}"
            println "glslc resolved to: ${glslcPath}"
        } else {
            println "VULKAN_SDK not set, trying to use glslc from PATH"
        }
        
        // 编译vulkan-shaders-gen工具
        exec {
            commandLine 'cmd', '/c', 'call "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Auxiliary\\Build\\vcvars64.bat" && cl.exe /EHsc /std:c++17 /Fe:' + vulkanShadersGenExe.absolutePath + ' ' + vulkanShadersGenSrc.absolutePath
            workingDir buildDir
        }
        
        // 运行vulkan-shaders-gen生成着色器
        exec {
            commandLine vulkanShadersGenExe.absolutePath, 
                        '--glslc', glslcPath,
                        '--input-dir', vulkanShadersDir.absolutePath,
                        '--output-dir', outputDir.absolutePath,
                        '--target-hpp', 'ggml-vulkan-shaders.hpp',
                        '--target-cpp', 'ggml-vulkan-shaders.cpp'
            workingDir outputDir
        }
        
        println "Vulkan shaders generated successfully"
    }
}

// 确保在CMake构建之前运行Vulkan着色器构建
preBuild.dependsOn buildVulkanShaders

android {
    namespace = 'com.starlocalrag.llamacpp'
    compileSdkVersion 34
    // buildToolsVersion removed - using default from Android Gradle Plugin

    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 34

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        ndk {
            abiFilters 'arm64-v8a', 'x86_64'
        }

        externalNativeBuild {
            cmake {
                cppFlags "-std=c++17 -frtti -fexceptions"
                arguments "-DANDROID_STL=c++_static", "-DGGML_F16C=0", "-DGGML_USE_F16C=0", "-DGGML_USE_VULKAN=1", "-DGGML_VULKAN=ON", "-DANDROID_PLATFORM=android-28"
            }
        }
    }

    buildTypes {
        release {
            // 开源项目：启用压缩和优化，但禁用混淆
            minifyEnabled true
            shrinkResources false  // 库模块不支持资源压缩
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            externalNativeBuild {
                cmake {
                    cppFlags "-std=c++17 -frtti -fexceptions -O3 -DNDEBUG"
                    arguments "-DANDROID_STL=c++_static", "-DCMAKE_BUILD_TYPE=Release", "-DGGML_F16C=0", "-DGGML_USE_F16C=0", "-DGGML_VULKAN=ON", "-DGGML_USE_VULKAN=1", "-DANDROID_PLATFORM=android-28"
                }
            }
        }
        debug {
            externalNativeBuild {
                cmake {
                    cppFlags "-std=c++17 -frtti -fexceptions -O3 -DNDEBUG"
                    arguments "-DANDROID_STL=c++_static", "-DCMAKE_BUILD_TYPE=Release", "-DGGML_F16C=0", "-DGGML_USE_F16C=0", "-DGGML_VULKAN=ON", "-DGGML_USE_VULKAN=1", "-DGGML_VULKAN_DEBUG=1", "-DANDROID_PLATFORM=android-28"
                }
            }
        }
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version = "3.22.1"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // sourceSets {
    //     main {
    //         jniLibs.srcDirs = ['src/main/jniLibs']
    //     }
    // }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.10.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}
